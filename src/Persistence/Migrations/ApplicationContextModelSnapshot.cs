// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Persistence.Data.Categories.CategoryData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_categories_name");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_categories_parent_id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Persistence.Data.Images.FileData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("path");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("Path")
                        .IsUnique()
                        .HasDatabaseName("ix_files_path");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Persistence.Data.Products.ProductData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("TEXT")
                        .HasColumnName("photo_id");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasDatabaseName("ix_products_photo_id");

                    b.HasIndex("CategoryId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_products_category_id_name");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Persistence.Data.TagOptions.TagOptionData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tag_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_tag_options");

                    b.HasIndex("TagId", "Value")
                        .IsUnique()
                        .HasDatabaseName("ix_tag_options_tag_id_value");

                    b.ToTable("tag_options", (string)null);
                });

            modelBuilder.Entity("Persistence.Data.Tags.TagData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("CategoryId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_tags_category_id_name");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("ProductDataTagOptionData", b =>
                {
                    b.Property<Guid>("OptionsId")
                        .HasColumnType("TEXT")
                        .HasColumnName("options_id");

                    b.Property<Guid>("ProductDataId")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_data_id");

                    b.HasKey("OptionsId", "ProductDataId")
                        .HasName("pk_product_tag_options");

                    b.HasIndex("ProductDataId")
                        .HasDatabaseName("ix_product_tag_options_product_data_id");

                    b.ToTable("product_tag_options", (string)null);
                });

            modelBuilder.Entity("Persistence.Data.Categories.CategoryData", b =>
                {
                    b.HasOne("Persistence.Data.Categories.CategoryData", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_categories_categories_parent_temp_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Persistence.Data.Products.ProductData", b =>
                {
                    b.HasOne("Persistence.Data.Categories.CategoryData", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories_category_id1");

                    b.HasOne("Persistence.Data.Images.FileData", "Photo")
                        .WithOne()
                        .HasForeignKey("Persistence.Data.Products.ProductData", "PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_files_photo_id1");

                    b.Navigation("Category");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Persistence.Data.TagOptions.TagOptionData", b =>
                {
                    b.HasOne("Persistence.Data.Tags.TagData", "Tag")
                        .WithMany("Options")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tag_options_tag_data_tag_temp_id");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Persistence.Data.Tags.TagData", b =>
                {
                    b.HasOne("Persistence.Data.Categories.CategoryData", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tags_categories_category_id1");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProductDataTagOptionData", b =>
                {
                    b.HasOne("Persistence.Data.TagOptions.TagOptionData", null)
                        .WithMany()
                        .HasForeignKey("OptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_tag_options_tag_option_data_options_temp_id");

                    b.HasOne("Persistence.Data.Products.ProductData", null)
                        .WithMany()
                        .HasForeignKey("ProductDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_tag_options_products_product_data_id");
                });

            modelBuilder.Entity("Persistence.Data.Categories.CategoryData", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Persistence.Data.Tags.TagData", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
